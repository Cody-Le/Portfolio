---
import type { ProjectData } from "../lib/objects/project";
import type { BadgeData } from "../lib/objects/badge";
const {
    project_data: ProjectData,
} = Astro.props;
const {
    links: { play : href },
    title,
    summary = "",
    media: { cover : image, video : video },
    badges = [],
    buttonText = "View project",
    openInNewTab = true,
} = ProjectData;
const actual_href = href.replace("ROOT", `${import.meta.env.BASE_URL}`);
---
<a class="" href = {actual_href}>
<div class="flex flex-col w-[calc(90vw)] sm:w-[calc(80vw)] md:w-150 bg-primary rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden border border-highlight/20 aspect-[5/7] sm:aspect-[12/10] hover:scale-[1.02] p-2">
     <div class="h-full items-center justify-center relative flex overflow-hidden rounded-lg bg-secondary group">
        {image ? <img id = "cover" src={`${import.meta.env.BASE_URL}` + image} alt={title} class={`absolute inset-0 w-full
         h-full object-cover object-center rounded-lg ${video ? "transition-opacity duration-300 group-hover:opacity-0": null}`} /> : null}
        {video ? <video preload="metadata" muted loop playsinline class="absolute inset-0 w-full h-full object-cover object-center rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <source src={`${import.meta.env.BASE_URL}` + video} type="video/mp4" />
        </video> : null}
        
    </div>
        
        
    <div class="relative z-10">
        <div class=" p-4 lg:text-center background">
            <h3 class="text-lg font-semibold text- font-dm-sans text-text-primary">{title}</h3>
                {summary ? <p class="mt-2 text-sm text-text-secondary font-source-serif-4">{summary}</p> : null}
        </div>   
        {badges.length > 0 ? 
            <div class="px-4 pb-4 flex flex-wrap gap-2 justify-center">
                {badges.map((badge: BadgeData) => (
                    <span class="font-dm-sans bg-highlight text-xs font-medium mr-2 px-2.5 py-0.5 rounded text-text-primary">{badge.label}</span>
                ))}
            </div>
        : null}
    </div>
</div>
</a>

<script>


  document.querySelectorAll('video').forEach(video => {
    const container = video.closest('.group');
    if (!container) return;
    
    // Mobile behavior: play when near center of viewport
    if (window.matchMedia('(max-width: 768px)').matches) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && entry.intersectionRatio > 0.7) {
              video.classList.add('opacity-100');
              video.classList.remove('opacity-0');
              video.play().catch(() => {
                // Autoplay might be blocked
              });
            } else {
              video.classList.remove('opacity-100');
              video.classList.add('opacity-0');
              video.pause();
              video.currentTime = 0;
            }
          });
        },
        {
          root: null, // use viewport
          threshold: [0.3, 0.7], // trigger at 30% and 70% visibility
          rootMargin: '-10% 0px' // slightly offset to favor center of screen
        }
      );
      observer.observe(container);
    } 
    // Desktop behavior: play on hover
    else {
      container.addEventListener('mouseenter', () => {
        video.play().catch(() => {
          // Autoplay may be blocked, that's okay
        });
      });
      
      container.addEventListener('mouseleave', () => {
        video.pause();
        video.currentTime = 0;
      });
    }
  });
</script>