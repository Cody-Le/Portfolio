---
import type { ProjectData } from "../lib/objects/project";
import type { BadgeData } from "../lib/objects/badge";
const {
    project_data: ProjectData,
} = Astro.props;
const {
    links: { play : href },
    title,
    summary = "",
    description = "",
    media: { cover : image, video : video },
    badges = [],
} = ProjectData;
const previewLength = 110;
const isLong = description && description.length > previewLength;
const previewText = isLong ? description.slice(0, previewLength).trim() + '... read more' : description;
const slug = title ? title.toLowerCase().replace(/\s+/g,'-').replace(/[^a-z0-9-_]/g,'') : Math.random().toString(36).slice(2,8);
---
<a class="">
    <div class="flex flex-col md:flex-row w-[calc(90vw)] md:h-120  rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden border dark:border-gray-800  hover:scale-[1.01] p-2 mb-10">
        <div class="md:w-[40%] md:h-full ]h-60 :w-full items-center justify-center relative flex overflow-hidden bg-gray-100 dark:bg-gray-800 group">
        {image ? <img src={`${import.meta.env.BASE_URL}` + image} alt={title} class="absolute inset-0 w-full h-full object-cover object-center transition-opacity duration-300 group-hover:opacity-0" /> : null}
        {video ? <video preload="metadata" muted loop playsinline class="absolute inset-0 w-full h-full object-cover object-center rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300">
            <source src={`${import.meta.env.BASE_URL}` + video} type="video/mp4" />
        </video> : null}
    </div>
        
    <div class="flex flex-col md:w-[60%] bg-white justify-center">
        <div class="p-4 text-rig">
            <h3 class="text-lg font-semibold text-gray-900">{title}</h3>
            {summary ? <p class="mt-2 text-sm text-gray-800 font-thin">{summary}</p> : null}
            <div class="block md:hidden">
                {description ? (
                <div class="mt-3" data-desc-slug={slug}>
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-preview cursor-pointer" role="button" tabindex="0" aria-expanded="false">{previewText}</p>
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-full hidden">{description}</p>
                </div>
            ) : null}
            </div>
            <div class="hidden md:block">
                {description ? (
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-full">{description}</p>
                ): null
                }
            </div>
        </div>   
        {badges.length > 0 ? 
            <div class="px-4 pb-4 flex flex-wrap gap-2 justify-center">
                {badges.map((badge: BadgeData) => (
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800">{badge.label}</span>
                ))}
            </div>
        : null}
    </div>
    
    </div>
</a>

<script>
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[data-desc-slug]').forEach(container => {
    const preview = container.querySelector('.desc-preview');
    const full = container.querySelector('.desc-full');
    if (!preview || !full) return;
    
    /** @type {(event: MouseEvent | KeyboardEvent) => void} */
    const toggle = (event) => {
      event.preventDefault();
      event.stopPropagation();
      const expanded = preview.getAttribute('aria-expanded') === 'true';
      preview.setAttribute('aria-expanded', !expanded ? 'true' : 'false');
      full.classList.toggle('hidden');
      preview.classList.toggle('hidden');
    };

    preview.addEventListener('click', toggle);
    full.addEventListener('click', toggle);
    
    const handleKeydown = /** @type {(evt: KeyboardEvent) => void} */ (evt => {
      if (evt.key === 'Enter' || evt.key === ' ') {
        toggle(evt);
      }
    });
    preview.addEventListener('keydown', handleKeydown);
  });
});
</script>

<script>
  document.querySelectorAll('video').forEach(video => {
    const container = video.closest('.group');
    if (!container) return;
    
    // Mobile behavior: play when near center of viewport
    if (window.matchMedia('(max-width: 768px)').matches) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting && entry.intersectionRatio > 0.7) {
              video.classList.add('opacity-100');
              video.classList.remove('opacity-0');
              video.play().catch(() => {
                // Autoplay might be blocked
              });
            } else {
              video.classList.remove('opacity-100');
              video.classList.add('opacity-0');
              video.pause();
              video.currentTime = 0;
            }
          });
        },
        {
          root: null, // use viewport
          threshold: [0.3, 0.7], // trigger at 30% and 70% visibility
          rootMargin: '-10% 0px' // slightly offset to favor center of screen
        }
      );
      observer.observe(container);
    } 
    // Desktop behavior: play on hover
    else {
      container.addEventListener('mouseenter', () => {
        video.play().catch(() => {
          // Autoplay may be blocked, that's okay
        });
      });
      
      container.addEventListener('mouseleave', () => {
        video.pause();
        video.currentTime = 0;
      });
    }
  });
</script>