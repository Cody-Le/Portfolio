---
import type { ProjectData } from "../lib/objects/project";
import type { BadgeData } from "../lib/objects/badge";
const {
    project_data: ProjectData,
} = Astro.props;
const {
    links: { play : href },
    title,
    summary = "",
    description = "",
    image = "",
    badges = [],
} = ProjectData;
const previewLength = 110;
const isLong = description && description.length > previewLength;
const previewText = isLong ? description.slice(0, previewLength).trim() + '... read more' : description;
const slug = title ? title.toLowerCase().replace(/\s+/g,'-').replace(/[^a-z0-9-_]/g,'') : Math.random().toString(36).slice(2,8);
---
<a class="">
    <div class="flex flex-col md:flex-row w-[calc(90vw)] md:h-100  rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden border dark:border-gray-800  hover:scale-[1.01] p-2 mb-10">
        {<main class="h-60 md:h-full md:grow bg-gray-200"></main>}
        
    <div class="flex flex-col md:w-[60%] bg-white justify-center">
        <div class="p-4 text-rig">
            <h3 class="text-lg font-semibold text-gray-900">{title}</h3>
            {summary ? <p class="mt-2 text-sm text-gray-800 font-thin">{summary}</p> : null}
            <div class="block md:hidden">
                {description ? (
                <div class="mt-3" data-desc-slug={slug}>
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-preview cursor-pointer" role="button" tabindex="0" aria-expanded="false">{previewText}</p>
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-full hidden">{description}</p>
                </div>
            ) : null}
            </div>
            <div class="hidden md:block">
                {description ? (
                    <p class="mt-3 text-sm text-gray-500 leading-relaxed desc-full">{description}</p>
                ): null
                }
            </div>
        </div>   
        {badges.length > 0 ? 
            <div class="px-4 pb-4 flex flex-wrap gap-2 justify-center">
                {badges.map((badge: BadgeData) => (
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium mr-2 px-2.5 py-0.5 rounded dark:bg-blue-200 dark:text-blue-800">{badge.label}</span>
                ))}
            </div>
        : null}
    </div>
    
    </div>
</a>

<script>
document.addEventListener('DOMContentLoaded', () => {
  document.querySelectorAll('[data-desc-slug]').forEach(container => {
    const preview = container.querySelector('.desc-preview');
    const full = container.querySelector('.desc-full');
    if (!preview || !full) return;
    
    /** @type {(event: MouseEvent | KeyboardEvent) => void} */
    const toggle = (event) => {
      event.preventDefault();
      event.stopPropagation();
      const expanded = preview.getAttribute('aria-expanded') === 'true';
      preview.setAttribute('aria-expanded', !expanded ? 'true' : 'false');
      full.classList.toggle('hidden');
      preview.classList.toggle('hidden');
    };

    preview.addEventListener('click', toggle);
    full.addEventListener('click', toggle);
    
    const handleKeydown = /** @type {(evt: KeyboardEvent) => void} */ (evt => {
      if (evt.key === 'Enter' || evt.key === ' ') {
        toggle(evt);
      }
    });
    preview.addEventListener('keydown', handleKeydown);
  });
});
</script>